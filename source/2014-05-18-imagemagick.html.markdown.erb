---
title: Fixing ImageMagick Lightboxes
date: 2014-05-18 14:25 UTC
tags: solutions, spree, javascript, jquery
---

<div class="solutions-blog">
	<div class="row">
		<div class="col-md-12">
			<div class="solutions-body">
				<h1 class="solutions-blog">Fixing Magnific Popup JQuery Functionality:</h1>
				<p>		The problem: On the item show page, the main image for the product is shown. Underneath are links to all of the alternate pictures available for the product. When scrolling over these thumbnails, the main image would change depending on which thumbnail you were hovering over. When you click on the main image, a lightbox will open up, taking up the screen and displaying the image. However, the functionality of javascript wasn’t allowing for each of the available images to be shown in the lightbox. Upon clicking any of the varying images, the lightbox would only display the first image.</p>
				<p>		The solution: First off, consulting the Magnific Popup Documentation. This is what the popup initialization looked like originally in our code:</p>
	<pre> 
		$('window').load(function() {
				var imageSource = $('#product-image-popup > img').attr('src'); 
			$('#some-button').magnificPopup({
			    items: [
			{
			src: imageSource,
			}
			    ],
			    gallery: {
			enabled: true
			},
			    type: ‘image’,
			   
			});
	</pre>
				<p>		So, we wanted to change this so that the function was loading a new image src for each image. First, we need to put the alternate images into an array. The items key being used by the Magnific Popup JQuery Plugin needed to being given the value of an array, ideally an array made of all the images. So in order to do this, we used web inspecter on the page to find what element was being targeted as the main image and as each of the thumbnails. More specifically, how to specifically target the image url’s we were seeking.</p>
				<pre>
					 var imageSources = $('#product-images ul#product-thumbnails a').map(function(index, img){ 
	        			return {src: $(img).attr('href')};
	      				}).toArray();
	      		</pre>
	      		<p>		The above code targets the a tags for these images with the specification of “#product-image ul#product-thumbnails a”. The map function is being called on this to map over each of the images found and create an array with index number and an image for each. Then taking this it returns the source for the image tag’s href or url attribute. By calling the toArray() function it then coverts the whole line of code into a readable array called imageSources that can them be used for the items key.</p>
	      		<p>Now taking this we change the original beginning of the the code to read like this: </p>
	<pre>
		$('window').load(function() {
		 var imageSources = $('#product-images ul#product-thumbnails a').map(function(index, img){ 
		        return {src: $(img).attr('href')};
		      }).toArray();
		$('#product-image-popup').magnificPopup({
		        items: imageSources,
	</pre>
				<p>		Now, back to the documentation of the Popup plugin we found two useful callbacks. The beforeOpen() and goTo(index) functions. The beforeOpen is was is used to find the right image url before displaying the image in the lightbox format. So using the callback, we write: </p>
	<pre> 
		       callbacks: {
		          beforeOpen: function(){
		            var targetSourceName = $('#product-image-popup img').attr('src');
		            var theIndex = 0;
		            console.log(targetSourceName);
		            $('#product-images ul#product-thumbnails a').each(function(index, img){
		              if($(img).attr('href') == targetSourceName){
		                theIndex = index;
		              }
		            });
	</pre>
				<p>		Inside this function, we are creating the variable targetSourceName which is equal to the source attribute for the image with the id of product-image-popup (which has been set in the HTML on the show page for our products). Then we set a variable theIndex set equal to 0 and logging the targetSourceName variable to the console.</p>
				<p>		In the next line of the function, we tell it to take each image item from array of images, and if these images have the same src as the targetSourceName, it then changes the theIndex variable to the value of that given index in the array.</p>
				<p>		The final piece is to call the goTo function within this function in order to have the correct image array index displayed. The final code will then look like this:</p>
	<pre> 
		$(window).load(function() {
	      var imageSources = $('#product-images ul#product-thumbnails a').map(function(index, img){ 
	        return {src: $(img).attr('href')};
	      }).toArray();

	      $('#product-image-popup').magnificPopup({
	        items: imageSources,
	        callbacks: {
	          beforeOpen: function(){
	            var targetSourceName = $('#product-image-popup img').attr('src');
	            var theIndex = 0;
	            console.log(targetSourceName);
	            $('#product-images ul#product-thumbnails a').each(function(index, img){
	              if($(img).attr('href') == targetSourceName){
	                theIndex = index;
	              }
	            });
	            this.goTo(theIndex);
	          }
	        },
	        gallery: {
	          enabled: true
	        },
	        type: 'image'
	      });

	      $('.bxslider').bxSlider();
	    });
	</pre>
				<p> 	And Success! We fixed it!.... Wait, nope we didn't. Now we can't get the lightbox to open on images that don't have any thumbnail images attached to them. The above code can't make an Array from the one main image and since we are using the Array we create to open the lightbox, the image won't open. So we add this little bit of code in to fix that problem:</p>
	<pre> 
		        if (imageSources.length === 0) {
		          mainImageSource = $('#product-image-popup > img').attr('src');
		          console.log(mainImageSource);
		          imageSources = [{src: mainImageSource}];
		          console.log(imageSources);
		        }
	</pre>
				<p>So, once again, all together:</p>
	<pre> 
		$(window).load(function() {
		        var imageSources = $('#product-images ul#product-thumbnails a').map(function(index, img){
		          return {src: $(img).attr('href')};
		        }).toArray();
		        console.log(imageSources);

		        if (imageSources.length === 0) {
		          mainImageSource = $('#product-image-popup > img').attr('src');
		          console.log(mainImageSource);
		          imageSources = [{src: mainImageSource}];
		          console.log(imageSources);
		        }

		        $('#product-image-popup').magnificPopup({
		          items: imageSources,
		          callbacks: {
		            beforeOpen: function(){
		              var targetSourceName = $('#product-image-popup img').attr('src');
		              var theIndex = 0;
		              // console.log(targetSourceName);
		              $('#product-images ul#product-thumbnails a').each(function(index, img){
		                if($(img).attr('href') == targetSourceName){
		                  theIndex = index;
		                }
		              });
		              this.goTo(theIndex);
		            }
		          },
		          gallery: {
		            enabled: true
		          },
		          type: 'image'
		        });

		      //initialization of bxSlider
		      $('.bxslider').bxSlider();
	    });
	</pre>
				<p>		And now we can finally open all images, whether it be one main image or any of the the thumbnails attached, into a beautiful lightbox for our furniture customers to enjoy.</p>
				<%= link_to 'Back to Solutions', '/tags/solutions.html' %>
			</div>
		</div>
	</div>
</div>